package com.estivate;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.AttributeConverter;
import javax.persistence.Convert;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;

import com.estivate.util.StringPipe;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class EstivateBasic {
	
	public static String create(Class entity) {
		
		List<String> fields = new ArrayList<>();
		for(Field field : entity.getDeclaredFields()) {
			StringPipe fieldCreation = new StringPipe();
			fieldCreation.separator(" ");
			
			fieldCreation.append(field.getName());
			
			Class returnClass = field.getType();
			
			if(field.getDeclaredAnnotation(Convert.class) != null) {
				returnClass = String.class;
			}
			
			if(returnClass.isEnum()) {

				if(field.getDeclaredAnnotation(Enumerated.class) != null && field.getDeclaredAnnotation(Enumerated.class).value() != null && field.getDeclaredAnnotation(Enumerated.class).value() == EnumType.STRING) {
					returnClass = String.class;
				}
				else {
					returnClass = Integer.class;
				}
			}
			
			if(returnClass == Integer.class || returnClass == Long.class || returnClass == Long.TYPE) {
				fieldCreation.append("int");
			}
			else if(field.getType() == String.class) {
				fieldCreation.append("varchar(100)");
			}
			else {
				System.out.println("Cannot map type "+field.getType());
			}
			
			if(field.isAnnotationPresent(Id.class)) {
				fieldCreation.append("primary key");
			}
			
			
			fields.add(fieldCreation.toString());
		}
		
		String result = "CREATE TABLE "+entity.getSimpleName()+" ("+fields.stream().collect(Collectors.joining(", "))+")";
		System.out.println(result);
		return result;
	}
	
	public static String insert(Object entity) {
		// Insert into students (ID, name) values (1, 'Nam Ha Minh')
		LinkedHashMap<String, String> fieldValueList = new LinkedHashMap<>();
		
		for(Field field : entity.getClass().getDeclaredFields()) {
			field.setAccessible(true);
			// Skip Id, will be auto generated by db
			if(field.isAnnotationPresent(Id.class)) {
				continue;
			}
			
			
			try {
				
				if(field.get(entity) == null) {
					continue;
				}
				
				fieldValueList.put(field.getName(), EstivateUtil.compileAttribute(entity.getClass(), field.getName(), field.get(entity)));
				
			}
			catch(Exception e) {
				log.error("Cannot map field "+field.getName(), e);
			}
			
		}
		
		return "INSERT INTO "+entity.getClass().getSimpleName()+"("+fieldValueList.keySet().stream().collect(Collectors.joining(", "))+") VALUES ("+fieldValueList.values().stream().collect(Collectors.joining(", "))+")";
	}
	

}
